[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Topik 4 Eksplorasi Data",
    "section": "",
    "text": "Kabar baiknya adalah bahwa statistik deskriptif ini memberi kita ringkasan yang dapat dikelola dan bermakna dari fenomena yang mendasarinya. Itulah isi bab ini. Kabar buruknya adalah bahwa penyederhanaan apa pun mengundang penyalahgunaan. Statistik deskriptif bisa secara teknis akurat namun sangat menyesatkan."
  },
  {
    "objectID": "index.html#data-preprocessing",
    "href": "index.html#data-preprocessing",
    "title": "Topik 4 Eksplorasi Data",
    "section": "4.1 Data Preprocessing",
    "text": "4.1 Data Preprocessing\nSekarang kita akan membahas beberapa metode manipulasi data untuk membersihkan dataset, menggabungkan berbagai dataset atau mengekstrak variabel dari bingkai data sebelum kita melompat ke beberapa dasar pemrograman.\n\n4.1.1 Extracting Data\nBingkai data adalah struktur data yang paling banyak digunakan di R karena menawarkan lebih banyak fleksibilitas dalam cara mereka dapat menangani data.\nMari kita lihat beberapa metode untuk mengekstrak data dari bingkai data. Kita akan menggunakan contoh dataset yang disebut us_stocks.csv\nMari kita impor menggunakan\nread.csv\n\ndata_stocks = read.csv(file =\"data/us_stocks.csv\", header = TRUE)\nhead(data_stocks)\n\n       Date  MSFT    IBM  AAPL   MCD    PG GOOG\n1 2/01/2002 33.52 121.50 11.65 26.49 40.00   NA\n2 3/01/2002 34.62 123.66 11.79 26.79 39.62   NA\n3 4/01/2002 34.45 125.60 11.84 26.99 39.22   NA\n4 7/01/2002 34.28 124.05 11.45 27.20 38.78   NA\n5 8/01/2002 34.69 124.70 11.30 27.36 38.88   NA\n6 9/01/2002 34.36 124.49 10.82 26.88 38.60   NA\n\n\nFungsi names atau colnames digunakan untuk mengakses nama kolom (atau variabel) dalam kumpulan data seperti yang ditunjukkan di bawah ini.\nFungsi row.names dapat digunakan untuk mengakses nama baris (jika ada) dari himpunan data\n\nnames(data_stocks)\n\n[1] \"Date\" \"MSFT\" \"IBM\"  \"AAPL\" \"MCD\"  \"PG\"   \"GOOG\"\n\n\n\ncolnames(data_stocks)\n\n[1] \"Date\" \"MSFT\" \"IBM\"  \"AAPL\" \"MCD\"  \"PG\"   \"GOOG\"\n\n\nVariabel data tertentu dapat diakses menggunakan nama atau indeks (nomor kolom) dalam bingkai data.\nUntuk memilih penggunaan kolom apa pun $ simbol diikuti dengan nama kolom atau namanya dalam tanda kurung siku seperti yang ditunjukkan pada contoh di bawah ini\n\nmsft_prices1 = data_stocks$MSFT  #the data is returned as a vector\nhead(msft_prices1)\n\n[1] 33.52 34.62 34.45 34.28 34.69 34.36\n\n\n\nmsft_prices2 = data_stocks[[\"MSFT\"]]  #the data is returned as a vector\nhead(msft_prices2)\n\n[1] 33.52 34.62 34.45 34.28 34.69 34.36\n\n\n\n# the following returns data as a data frame\nmsft_prices3 = data_stocks[\"MSFT\"]  #can also be used to access multiple columns\nhead(msft_prices3)\n\n   MSFT\n1 33.52\n2 34.62\n3 34.45\n4 34.28\n5 34.69\n6 34.36\n\n\nKolom data ini juga dapat diakses seperti matriks, menggunakan indeks matriks.\nMetode ini dapat mengembalikan baris lengkap, kolom lengkap, atau hanya elemen dari himpunan data.\n\n# MSFT is in the second column and leaving the row index blank returns all the\n# rows for the particular column\n\nmsft_prices4 = data_stocks[, 2]\n\nhead(msft_prices4)\n\n[1] 33.52 34.62 34.45 34.28 34.69 34.36\n\n\n\n# all the elements in row 4\ndata_stocks[4, ]\n\n       Date  MSFT    IBM  AAPL  MCD    PG GOOG\n4 7/01/2002 34.28 124.05 11.45 27.2 38.78   NA\n\n\n\n\n4.1.2 Combining Data Frames\nMungkin diperlukan untuk menggabungkan dua bingkai data selama pemrosesan data.\nIni dapat dilakukan dengan menumpuknya baris demi baris atau menggabungkannya dengan kolom menggunakan rbind dan cbind masing-masing.\nSaat menggunakan cbind Jumlah baris dalam kolom yang digabungkan harus sama panjangnya juga di\nrbind Jumlah kolom himpunan data yang digabungkan harus sama. Mari kita lihat contohnya :\n\n# First create a vector having the returns for msft\nmsft_ret = 100 * diff(log(data_stocks$MSFT))\n# combine the vector with the data\n\n\n# different length\nlength(msft_ret)\n\n[1] 2783\n\n\n\nlength(data_stocks$MSFT)\n\n[1] 2784\n\n\n\n# add one more value to vector msft_ret\nmsft_ret = c(0, msft_ret)\n# check the length\nlength(msft_ret)\n\n[1] 2784\n\n\n\n# lets combine now (it should work)\ndata_stocks_r = cbind(data_stocks, MSFT_RET = msft_ret)\nhead(data_stocks_r)  #shows one more column added to the data\n\n       Date  MSFT    IBM  AAPL   MCD    PG GOOG   MSFT_RET\n1 2/01/2002 33.52 121.50 11.65 26.49 40.00   NA  0.0000000\n2 3/01/2002 34.62 123.66 11.79 26.79 39.62   NA  3.2289274\n3 4/01/2002 34.45 125.60 11.84 26.99 39.22   NA -0.4922552\n4 7/01/2002 34.28 124.05 11.45 27.20 38.78   NA -0.4946904\n5 8/01/2002 34.69 124.70 11.30 27.36 38.88   NA  1.1889367\n6 9/01/2002 34.36 124.49 10.82 26.88 38.60   NA -0.9558364\n\n\n\n# create two dataframes from data_stocks\ndata_r1 = data_stocks[1:10, ]  #first 10 rows\ndata_r2 = data_stocks[2775:2784, ]  #last 10 rows\ndata_stocks_rbind = rbind(data_r1, data_r2)\nprint(data_stocks_rbind)\n\n           Date  MSFT    IBM   AAPL   MCD    PG   GOOG\n1     2/01/2002 33.52 121.50  11.65 26.49 40.00     NA\n2     3/01/2002 34.62 123.66  11.79 26.79 39.62     NA\n3     4/01/2002 34.45 125.60  11.84 26.99 39.22     NA\n4     7/01/2002 34.28 124.05  11.45 27.20 38.78     NA\n5     8/01/2002 34.69 124.70  11.30 27.36 38.88     NA\n6     9/01/2002 34.36 124.49  10.82 26.88 38.60     NA\n7    10/01/2002 34.64 122.14  10.62 26.81 38.46     NA\n8    11/01/2002 34.30 120.31  10.52 26.34 38.60     NA\n9    14/01/2002 34.24 118.05  10.58 26.02 39.35     NA\n10   15/01/2002 34.78 118.85  10.85 26.20 39.82     NA\n2775 17/12/2012 27.10 193.62 518.83 89.91 69.93 720.78\n2776 18/12/2012 27.56 195.69 533.90 90.52 69.97 721.07\n2777 19/12/2012 27.31 195.08 526.31 89.71 69.34 720.11\n2778 20/12/2012 27.68 194.77 521.73 90.04 69.82 722.36\n2779 21/12/2012 27.45 193.42 519.33 90.18 68.72 715.63\n2780 24/12/2012 27.06 192.40 520.17 89.29 68.52 709.50\n2781 26/12/2012 26.86 191.95 513.00 88.74 68.00 708.87\n2782 27/12/2012 26.96 192.71 515.06 88.72 67.97 706.29\n2783 28/12/2012 26.55 189.83 509.59 87.58 67.15 700.01\n2784 31/12/2012 26.71 191.55 532.17 88.21 67.89 707.38\n\n\n\n\n4.1.3 Sub setting and Logical Data Selection\nMisalkan kita ingin mengekstrak data dengan karakteristik tertentu seperti rentang nilai, dll.\nIni dapat dicapai dengan menggunakan pernyataan logis dalam notasi braket.\nContoh berikut mengilustrasikan. Lihat help(“&gt;”) untuk melihat lebih banyak operator perbandingan.\n\n# select all rows with Apple prices above 100\ndata_aaplgr100 = data_stocks[data_stocks$AAPL &gt; 100, ]\nhead(data_aaplgr100)\n\n          Date  MSFT    IBM   AAPL   MCD    PG   GOOG\n1342 2/05/2007 30.61 102.22 100.39 50.02 62.37 465.78\n1343 3/05/2007 30.97 102.80 100.40 49.91 62.00 473.23\n1344 4/05/2007 30.56 102.96 100.81 49.92 62.41 471.12\n1345 7/05/2007 30.71 103.16 103.92 49.50 62.18 467.27\n1346 8/05/2007 30.75 103.29 105.06 49.32 61.75 466.81\n1347 9/05/2007 30.78 104.38 106.88 49.84 62.01 469.25\n\n\n\nmin(data_aaplgr100$AAPL)  #check if the prices are above 100\n\n[1] NA\n\n\n\n# this give NA as the minimum which indicates that data frame has NA lets\n# remove NAs from data_aaplgr100 using na.omit function\ndata_aaplgr100 = na.omit(data_aaplgr100)\n# now check the minimum again\nmin(data_aaplgr100$AAPL)\n\n[1] 100.06\n\n\nFungsi yang digunakan dalam contoh di atas dapat digunakan untuk menghapus semua nilai kosong dalam himpunan data.\n\nhead(data_stocks)  #notice NAs in GOOG\n\n       Date  MSFT    IBM  AAPL   MCD    PG GOOG\n1 2/01/2002 33.52 121.50 11.65 26.49 40.00   NA\n2 3/01/2002 34.62 123.66 11.79 26.79 39.62   NA\n3 4/01/2002 34.45 125.60 11.84 26.99 39.22   NA\n4 7/01/2002 34.28 124.05 11.45 27.20 38.78   NA\n5 8/01/2002 34.69 124.70 11.30 27.36 38.88   NA\n6 9/01/2002 34.36 124.49 10.82 26.88 38.60   NA\n\n\n\ndata_stocks_googlena = data_stocks[!is.na(data_stocks$GOOG), ]\nhead(data_stocks_googlena)  #after removing NAs\n\n          Date  MSFT   IBM  AAPL   MCD    PG   GOOG\n663 19/08/2004 27.12 84.89 15.36 26.60 54.48 100.34\n664 20/08/2004 27.20 85.25 15.40 27.07 54.85 108.31\n665 23/08/2004 27.24 84.65 15.54 26.64 54.75 109.40\n666 24/08/2004 27.24 84.71 15.98 26.87 54.95 104.87\n667 25/08/2004 27.55 85.07 16.52 26.95 55.30 106.00\n668 26/08/2004 27.44 84.69 17.33 27.10 55.70 107.91\n\n\n\n# the above can still leave NAs in other columns use na.omit to remove all the\n# blank data\ndata_stocks_naomit = na.omit(data_stocks)\n\nMungkin ada persyaratan dalam pra pemrosesan data di mana seseorang mungkin harus memilih data dalam suatu rentang.\nContoh berikut memilih data di mana harga MSFT berada di antara 20 dan 30.\n& adalah operator Logika di R, lihat help(“&”) untuk melihat detail selengkapnya dan operator Logika lainnya.\n\ndata_msft = data_stocks_naomit[data_stocks_naomit$MSFT &lt;= 30 & data_stocks_naomit$MSFT &gt;\n    20, ]\nmin(data_msft$MSFT)  #check \n\n[1] 20.06\n\n\n\nargs(subset.data.frame)\n\nfunction (x, subset, select, drop = FALSE, ...) \nNULL\n\n\n\naaplgr100 = subset(data_stocks_naomit, AAPL &gt; 100)\nhead(aaplgr100)\n\n          Date  MSFT    IBM   AAPL   MCD    PG   GOOG\n1342 2/05/2007 30.61 102.22 100.39 50.02 62.37 465.78\n1343 3/05/2007 30.97 102.80 100.40 49.91 62.00 473.23\n1344 4/05/2007 30.56 102.96 100.81 49.92 62.41 471.12\n1345 7/05/2007 30.71 103.16 103.92 49.50 62.18 467.27\n1346 8/05/2007 30.75 103.29 105.06 49.32 61.75 466.81\n1347 9/05/2007 30.78 104.38 106.88 49.84 62.01 469.25\n\n\n\nmin(aaplgr100$AAPL)\n\n[1] 100.06"
  },
  {
    "objectID": "index.html#data-transformation-from-wide-to-long-or-vice-versa",
    "href": "index.html#data-transformation-from-wide-to-long-or-vice-versa",
    "title": "Topik 4 Eksplorasi Data",
    "section": "4.2 Data Transformation from Wide to Long (or vice versa)",
    "text": "4.2 Data Transformation from Wide to Long (or vice versa)\nTerkadang diperlukan untuk mengubah data format lebar menjadi panjang, yang sering diperlukan untuk bekerja dengan paket ggplot2 (dibahas di bagian grafik) Paket R tidyr menyediakan dua fungsi pivot_longer() dan pivot_wider() untuk mengubah data menjadi format panjang atau lebar. Mari kita konversi data saham ke format panjang\n\nlibrary(tidyr)\n\nFinData_long = pivot_longer(data = data_stocks, cols = -Date, names_to = \"Stock\",\n    values_to = \"Price\")\nhead(FinData_long)\n\n# A tibble: 6 × 3\n  Date      Stock Price\n  &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt;\n1 2/01/2002 MSFT   33.5\n2 2/01/2002 IBM   122. \n3 2/01/2002 AAPL   11.6\n4 2/01/2002 MCD    26.5\n5 2/01/2002 PG     40  \n6 2/01/2002 GOOG   NA  \n\n\n\nFinData_wide = pivot_wider(FinData_long, names_from = Stock, values_from = Price)\nhead(FinData_wide)\n\n# A tibble: 6 × 7\n  Date       MSFT   IBM  AAPL   MCD    PG  GOOG\n  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 2/01/2002  33.5  122.  11.6  26.5  40      NA\n2 3/01/2002  34.6  124.  11.8  26.8  39.6    NA\n3 4/01/2002  34.4  126.  11.8  27.0  39.2    NA\n4 7/01/2002  34.3  124.  11.4  27.2  38.8    NA\n5 8/01/2002  34.7  125.  11.3  27.4  38.9    NA\n6 9/01/2002  34.4  124.  10.8  26.9  38.6    NA"
  },
  {
    "objectID": "index.html#summary-statistics",
    "href": "index.html#summary-statistics",
    "title": "Topik 4 Eksplorasi Data",
    "section": "4.3 Summary Statistics",
    "text": "4.3 Summary Statistics\nstatistik deskriptif ini memberi kita ringkasan yang dapat dikelola dan bermakna dari fenomena yang mendasarinya. Itulah isi bab ini. Kabar buruknya adalah bahwa penyederhanaan apa pun mengundang penyalahgunaan.\nSangat mudah untuk menghitung statistik ringkasan dasar dalam R, sebagian besar fungsi diberi nama sesuai dengan apa yang mereka lakukan.\nContoh berikut menunjukkan cara menghitung ukuran statistik dalam tabel-1 untuk harga Dow Jones dalam file data data_fin.csv\n\n# change the working directory to the folder containing data_fin.csv or provide\n# the full path with the filename\ndata_stocks = read.csv(\"data/data_fin.csv\")  #import data\nhead(data_stocks)\n\n        Date     DJI   AXP   MMM   ATT    BA   CAT CISCO    DD   XOM    GE\n1  3/01/2000 11357.5 45.82 47.19 47.19 40.12 24.31 54.05 65.00 39.09 49.95\n2  4/01/2000 10997.9 44.09 45.31 44.25 40.12 24.00 51.00 65.00 38.41 48.06\n3  5/01/2000 11122.7 42.96 46.62 44.94 42.62 24.56 51.19 67.75 40.50 47.70\n4  6/01/2000 11253.3 43.78 50.62 43.75 43.06 25.81 50.00 71.50 42.59 48.51\n5  7/01/2000 11522.6 44.42 51.47 44.12 44.12 26.66 52.94 71.62 42.31 50.28\n6 10/01/2000 11572.2 45.04 51.12 44.75 43.69 25.78 54.91 70.00 41.88 50.37\n     GS    HD    IBM  INTC   JNJ   JPM   MRK   MCD  MSFT   NKE\n1 88.31 65.50 115.56 43.47 46.09 48.69 64.04 39.62 58.34 12.03\n2 82.38 61.50 112.06 41.47 44.41 47.27 61.61 38.81 56.31 11.38\n3 78.88 61.44 116.00 41.81 44.88 46.98 64.22 39.44 56.91 12.03\n4 82.25 60.00 114.62 39.38 46.28 47.65 64.75 38.88 55.00 11.97\n5 82.56 62.81 113.31 41.00 47.88 48.52 70.97 39.75 55.72 11.97\n6 84.38 63.19 118.44 42.88 47.03 47.69 68.89 40.06 56.12 12.17\n\n\n\nDJI = data_stocks$DJI\nDJI = na.omit(DJI)  #remove NAs as it will affect the calculations\n# Arithmetic mean\nmean(DJI)\n\n[1] 11098.12\n\n\n\n# Geometric mean\nexp(mean(log(DJI)))\n\n[1] 10953.39\n\n\n\n# median\nmedian(DJI)\n\n[1] 10748.8\n\n# variance & standard deviation\nvar(DJI)\n\n[1] 3280347\n\nsd(DJI)\n\n[1] 1811.173\n\n# interquantile range and few quantiles\nIQR(DJI)\n\n[1] 2276.25\n\nquantile(DJI)\n\n      0%      25%      50%      75%     100% \n 6547.10 10063.25 10748.80 12339.50 16576.66 \n\n# skewness and kurtosis skewness and kurtosis functions are not available in R\n# core library but in library e1071 (there are other packages which have\n# functions for skewness and kurtosis try ??kurtosis or search for the function\n# on RSearch.\nlibrary(e1071)\nskewness(DJI)\n\n[1] 0.4777828\n\nkurtosis(DJI)\n\n[1] 0.08404185\n\n\nFungsi summary di R memberikan beberapa ringkasan dasar yaitu, nilai minimum, nilai maksimum, nilai median dan kuartil untuk satu variabel atau dataset. Fungsi summary dapat digunakan sebagai berikut :\n\n# summary of one column/variable in a dataframe\nsummary(DJI)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   6547   10063   10749   11098   12340   16577 \n\n# summary of whole dataset excluding the time column\nsummary(data_stocks[, c(2:21)])\n\n      DJI             AXP             MMM              ATT       \n Min.   : 6547   Min.   :10.26   Min.   : 39.50   Min.   :19.34  \n 1st Qu.:10063   1st Qu.:38.31   1st Qu.: 62.55   1st Qu.:25.54  \n Median :10749   Median :47.49   Median : 77.67   Median :29.65  \n Mean   :11098   Mean   :46.77   Mean   : 75.78   Mean   :31.77  \n 3rd Qu.:12340   3rd Qu.:54.44   3rd Qu.: 85.55   3rd Qu.:37.22  \n Max.   :16577   Max.   :90.73   Max.   :140.25   Max.   :58.50  \n NA's   :27      NA's   :12      NA's   :12       NA's   :12     \n       BA              CAT             CISCO             DD       \n Min.   : 25.06   Min.   : 14.91   Min.   : 8.60   Min.   :16.14  \n 1st Qu.: 44.00   1st Qu.: 28.64   1st Qu.:17.68   1st Qu.:41.13  \n Median : 63.56   Median : 57.10   Median :20.43   Median :44.53  \n Mean   : 62.95   Mean   : 56.01   Mean   :23.41   Mean   :44.37  \n 3rd Qu.: 74.90   3rd Qu.: 79.36   3rd Qu.:24.17   3rd Qu.:48.92  \n Max.   :138.36   Max.   :116.20   Max.   :80.06   Max.   :71.62  \n NA's   :12       NA's   :12       NA's   :13      NA's   :12     \n      XOM               GE              GS              HD       \n Min.   : 30.27   Min.   : 6.66   Min.   : 52.0   Min.   :18.00  \n 1st Qu.: 42.46   1st Qu.:20.00   1st Qu.: 92.2   1st Qu.:31.00  \n Median : 64.77   Median :30.33   Median :116.2   Median :37.37  \n Mean   : 63.20   Mean   :29.56   Mean   :126.9   Mean   :40.20  \n 3rd Qu.: 81.62   3rd Qu.:36.03   3rd Qu.:159.5   3rd Qu.:46.23  \n Max.   :101.51   Max.   :59.94   Max.   :247.9   Max.   :82.34  \n NA's   :12       NA's   :12      NA's   :12      NA's   :12     \n      IBM              INTC            JNJ             JPM       \n Min.   : 55.07   Min.   :12.08   Min.   :33.69   Min.   :15.45  \n 1st Qu.: 87.82   1st Qu.:20.17   1st Qu.:55.27   1st Qu.:35.66  \n Median :106.48   Median :22.76   Median :61.30   Median :40.20  \n Mean   :118.83   Mean   :25.21   Mean   :61.07   Mean   :40.36  \n 3rd Qu.:130.00   3rd Qu.:26.77   3rd Qu.:65.20   3rd Qu.:45.71  \n Max.   :215.80   Max.   :74.88   Max.   :95.63   Max.   :65.70  \n NA's   :12       NA's   :13      NA's   :12      NA's   :12     \n      MRK             MCD              MSFT            NKE       \n Min.   :20.99   Min.   : 12.38   Min.   :15.15   Min.   : 6.64  \n 1st Qu.:34.53   1st Qu.: 29.19   1st Qu.:25.67   1st Qu.:14.56  \n Median :43.63   Median : 43.78   Median :27.59   Median :23.25  \n Mean   :44.65   Mean   : 51.07   Mean   :28.38   Mean   :28.01  \n 3rd Qu.:51.55   3rd Qu.: 70.36   3rd Qu.:30.19   3rd Qu.:36.90  \n Max.   :89.85   Max.   :103.59   Max.   :58.34   Max.   :79.86  \n NA's   :13      NA's   :12       NA's   :13      NA's   :12     \n\n\n\n4.3.1 Example-Descriptive Statistics of Stock Returns\nDalam contoh ini kita akan menggunakan R untuk menghitung statistik deskriptif untuk pengembalian 10 saham dalam file datasets data_fin.csv\n• Pertama-tama kita akan mengimpor dataset ke R menggunakan fungsi read.csv\n\ndata_cs1 = read.csv(\"data/data_fin.csv\")\nhead(data_cs1)  #check the imported data\n\n        Date     DJI   AXP   MMM   ATT    BA   CAT CISCO    DD   XOM    GE\n1  3/01/2000 11357.5 45.82 47.19 47.19 40.12 24.31 54.05 65.00 39.09 49.95\n2  4/01/2000 10997.9 44.09 45.31 44.25 40.12 24.00 51.00 65.00 38.41 48.06\n3  5/01/2000 11122.7 42.96 46.62 44.94 42.62 24.56 51.19 67.75 40.50 47.70\n4  6/01/2000 11253.3 43.78 50.62 43.75 43.06 25.81 50.00 71.50 42.59 48.51\n5  7/01/2000 11522.6 44.42 51.47 44.12 44.12 26.66 52.94 71.62 42.31 50.28\n6 10/01/2000 11572.2 45.04 51.12 44.75 43.69 25.78 54.91 70.00 41.88 50.37\n     GS    HD    IBM  INTC   JNJ   JPM   MRK   MCD  MSFT   NKE\n1 88.31 65.50 115.56 43.47 46.09 48.69 64.04 39.62 58.34 12.03\n2 82.38 61.50 112.06 41.47 44.41 47.27 61.61 38.81 56.31 11.38\n3 78.88 61.44 116.00 41.81 44.88 46.98 64.22 39.44 56.91 12.03\n4 82.25 60.00 114.62 39.38 46.28 47.65 64.75 38.88 55.00 11.97\n5 82.56 62.81 113.31 41.00 47.88 48.52 70.97 39.75 55.72 11.97\n6 84.38 63.19 118.44 42.88 47.03 47.69 68.89 40.06 56.12 12.17\n\n\nTerapkan fungsi ke dengan tanggal sebagai karakter dan kemudian setelah mengubah tanggal ke kelas Tanggal.\n\n# selecting first 10 price series including the data column\ndata_cs1.1 = data_cs1[, c(1:11)]\n# data cleaning-remove NAs\ndata_cs1.1 = na.omit(data_cs1.1)\ncolnames(data_cs1.1)  # see the columns present in the data\n\n [1] \"Date\"  \"DJI\"   \"AXP\"   \"MMM\"   \"ATT\"   \"BA\"    \"CAT\"   \"CISCO\" \"DD\"   \n[10] \"XOM\"   \"GE\"   \n\nsummary(data_cs1.1)  #notice the Date variable\n\n     Date                DJI             AXP             MMM        \n Length:3523        Min.   : 6547   Min.   :10.26   Min.   : 39.50  \n Class :character   1st Qu.:10063   1st Qu.:38.38   1st Qu.: 62.55  \n Mode  :character   Median :10749   Median :47.60   Median : 77.67  \n                    Mean   :11098   Mean   :46.83   Mean   : 75.80  \n                    3rd Qu.:12340   3rd Qu.:54.50   3rd Qu.: 85.61  \n                    Max.   :16577   Max.   :90.73   Max.   :140.25  \n      ATT              BA              CAT             CISCO      \n Min.   :19.34   Min.   : 25.06   Min.   : 14.91   Min.   : 8.60  \n 1st Qu.:25.54   1st Qu.: 44.02   1st Qu.: 28.48   1st Qu.:17.68  \n Median :29.76   Median : 63.61   Median : 57.11   Median :20.39  \n Mean   :31.79   Mean   : 62.99   Mean   : 56.03   Mean   :23.42  \n 3rd Qu.:37.23   3rd Qu.: 74.95   3rd Qu.: 79.50   3rd Qu.:24.18  \n Max.   :58.50   Max.   :138.36   Max.   :116.20   Max.   :80.06  \n       DD             XOM               GE       \n Min.   :16.14   Min.   : 30.27   Min.   : 6.66  \n 1st Qu.:41.17   1st Qu.: 42.41   1st Qu.:20.04  \n Median :44.58   Median : 64.70   Median :30.37  \n Mean   :44.43   Mean   : 63.18   Mean   :29.63  \n 3rd Qu.:48.93   3rd Qu.: 81.70   3rd Qu.:36.05  \n Max.   :71.62   Max.   :101.51   Max.   :59.94  \n\n# check class of dates which will be factor ( treated as factor by default)\\t\nclass(data_cs1.1$Date)\n\n[1] \"character\"\n\n# convert dates to class Date\ndata_cs1.1$Date = as.Date(data_cs1.1$Date, format = \"%d/%m/%Y\")\nclass(data_cs1.1$Date)\n\n[1] \"Date\"\n\nsummary(data_cs1.1)  #notice the Date variable\n\n      Date                 DJI             AXP             MMM        \n Min.   :2000-01-03   Min.   : 6547   Min.   :10.26   Min.   : 39.50  \n 1st Qu.:2003-07-08   1st Qu.:10063   1st Qu.:38.38   1st Qu.: 62.55  \n Median :2007-01-05   Median :10749   Median :47.60   Median : 77.67  \n Mean   :2007-01-03   Mean   :11098   Mean   :46.83   Mean   : 75.80  \n 3rd Qu.:2010-07-06   3rd Qu.:12340   3rd Qu.:54.50   3rd Qu.: 85.61  \n Max.   :2014-01-03   Max.   :16577   Max.   :90.73   Max.   :140.25  \n      ATT              BA              CAT             CISCO      \n Min.   :19.34   Min.   : 25.06   Min.   : 14.91   Min.   : 8.60  \n 1st Qu.:25.54   1st Qu.: 44.02   1st Qu.: 28.48   1st Qu.:17.68  \n Median :29.76   Median : 63.61   Median : 57.11   Median :20.39  \n Mean   :31.79   Mean   : 62.99   Mean   : 56.03   Mean   :23.42  \n 3rd Qu.:37.23   3rd Qu.: 74.95   3rd Qu.: 79.50   3rd Qu.:24.18  \n Max.   :58.50   Max.   :138.36   Max.   :116.20   Max.   :80.06  \n       DD             XOM               GE       \n Min.   :16.14   Min.   : 30.27   Min.   : 6.66  \n 1st Qu.:41.17   1st Qu.: 42.41   1st Qu.:20.04  \n Median :44.58   Median : 64.70   Median :30.37  \n Mean   :44.43   Mean   : 63.18   Mean   :29.63  \n 3rd Qu.:48.93   3rd Qu.: 81.70   3rd Qu.:36.05  \n Max.   :71.62   Max.   :101.51   Max.   :59.94  \n\n\nUbah harga menjadi pengembalian\n\nd2 = as.data.frame(sapply(data_cs1.1[2:11], function(x) diff(log(x)) * 100))  #note it will be one less\n# create a different dataframe with returns\ndata_stocks_ret = as.data.frame(cbind(Date = data_cs1.1$Date[2:length(data_cs1.1$Date)],\n    d2), stringsAsFactors = FALSE, row.names = NULL)\n# visual inspection\nhead(data_stocks_ret)\n\n        Date        DJI        AXP        MMM        ATT         BA       CAT\n1 2000-01-04 -3.2173973 -3.8487678 -4.0654247 -6.4326634  0.0000000 -1.283396\n2 2000-01-05  1.1283720 -2.5963549  2.8501875  1.5472895  6.0448664  2.306527\n3 2000-01-06  1.1673354  1.8907642  8.2317122 -2.6836654  1.0270865  4.964291\n4 2000-01-07  2.3648905  1.4512726  1.6652359  0.8421582  2.4318702  3.240230\n5 2000-01-10  0.4295346  1.3861165 -0.6823304  1.4178250 -0.9793951 -3.356532\n6 2000-01-11 -0.5293883  0.9061837 -1.7165263 -1.4178250 -1.8713726 -1.563754\n       CISCO         DD        XOM         GE\n1 -5.8083911  0.0000000 -1.7548837 -3.8572275\n2  0.3718568  4.1437190  5.2984132 -0.7518832\n3 -2.3521195  5.3872990  5.0317510  1.6838564\n4  5.7136191  0.1676915 -0.6596019  3.5837421\n5  3.6536284 -2.2879123 -1.0215079  0.1788376\n6 -3.0697677 -1.8018506  1.1868167  0.2379537\n\n\n\n4.3.1.1 Using the Describe function\nPaket psych dilengkapi dengan fungsi yang disebut describe yang menghasilkan statistik deskriptif untuk semua vektor data (kolom) dalam bingkai data, matriks atau vektor.\n\nlibrary(psych)  #load the required package\nargs(describe)  #arguments for describe function\n\nfunction (x, na.rm = TRUE, interp = FALSE, skew = TRUE, ranges = TRUE, \n    trim = 0.1, type = 3, check = TRUE, fast = NULL, quant = NULL, \n    IQR = FALSE, omit = FALSE, data = NULL) \nNULL\n\n# use describe to calculate descriptive stats for data_cs1.1r\ndesc1 = describe(data_stocks_ret[, 2:11])  #note we dont pass the date column\n# check the output\nhead(desc1)\n\n    vars    n  mean   sd median trimmed  mad    min   max range  skew kurtosis\nDJI    1 3522  0.01 1.23   0.04    0.03 0.82  -8.20 10.51 18.71 -0.06     7.71\nAXP    2 3522  0.02 2.89   0.02    0.03 1.55 -19.35 18.77 38.12 -0.01     9.14\nMMM    3 3522  0.03 1.55   0.03    0.03 1.10  -9.38 10.39 19.78  0.06     4.87\nATT    4 3522 -0.01 1.80   0.03    0.01 1.22 -13.54 15.08 28.62  0.02     6.26\nBA     5 3522  0.03 2.01   0.05    0.06 1.57 -19.39 14.38 33.77 -0.26     5.39\nCAT    6 3522  0.04 2.14   0.04    0.05 1.65 -15.69 13.73 29.42 -0.08     4.08\n      se\nDJI 0.02\nAXP 0.05\nMMM 0.03\nATT 0.03\nBA  0.03\nCAT 0.04\n\n# the above output is in long format, we can transpose it get column format\ndesc1.t = t(desc1)\nhead(desc1.t)\n\n                 DJI          AXP          MMM           ATT           BA\nvars    1.000000e+00 2.000000e+00 3.000000e+00  4.000000e+00 5.000000e+00\nn       3.522000e+03 3.522000e+03 3.522000e+03  3.522000e+03 3.522000e+03\nmean    1.055257e-02 1.908563e-02 3.056011e-02 -8.647491e-03 3.499777e-02\nsd      1.226702e+00 2.892586e+00 1.551706e+00  1.799180e+00 2.013123e+00\nmedian  4.442671e-02 1.723604e-02 3.233787e-02  3.018428e-02 5.279680e-02\ntrimmed 2.597511e-02 3.152635e-02 3.241946e-02  9.134423e-03 5.567097e-02\n                 CAT         CISCO            DD          XOM            GE\nvars    6.000000e+00  7.000000e+00  8.000000e+00 9.000000e+00  1.000000e+01\nn       3.522000e+03  3.522000e+03  3.522000e+03 3.522000e+03  3.522000e+03\nmean    3.710732e-02 -2.554732e-02 -5.379787e-04 2.653014e-02 -1.696661e-02\nsd      2.143040e+00  2.744068e+00  1.881993e+00 1.629181e+00  2.057353e+00\nmedian  4.291300e-02  3.800312e-02  0.000000e+00 5.437650e-02  0.000000e+00\ntrimmed 4.678016e-02 -1.339579e-04  1.469270e-03 4.883990e-02  9.841473e-05\n\n\nStatistik deskriptif yang dihasilkan di atas memberikan mean, median, standar deviasi, trimmed mean (dipangkas), median, mad (median absolut deviasi dari median), minimum (min), maksimum (max), skewness (miring), kurtosis dan kesalahan standar (se).\nIni dapat dengan mudah ditransfer ke file CSV atau file teks. Satu baris kode berikut mentransfer statistik deskriptif ke file CSV yang kemudian dapat diimpor ke file word atau lateks sesuai kebutuhan.\n\nrequire(pastecs)  # note library and require can both be used to include a package\n# detach the package pastecs its useful to avoid any conflicts (e.g psych and\n# Hmisc have 'describe' function with two different behaviours\ndetach(\"package:psych\", unload = TRUE)\n# use stat.desc in with default arguments\ndesc2 = stat.desc(data_stocks_ret[, 2:11], norm = TRUE)\ndesc2  #note skewness/kurtosis\n\n                       DJI           AXP           MMM           ATT\nnbr.val       3.522000e+03  3.522000e+03  3.522000e+03  3.522000e+03\nnbr.null      2.000000e+00  2.400000e+01  3.000000e+01  5.000000e+01\nnbr.na        0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00\nmin          -8.200737e+00 -1.935233e+01 -9.383688e+00 -1.353821e+01\nmax           1.050812e+01  1.877116e+01  1.039309e+01  1.508318e+01\nrange         1.870886e+01  3.812349e+01  1.977678e+01  2.862139e+01\nsum           3.716616e+01  6.721959e+01  1.076327e+02 -3.045646e+01\nmedian        4.442671e-02  1.723604e-02  3.233787e-02  3.018428e-02\nmean          1.055257e-02  1.908563e-02  3.056011e-02 -8.647491e-03\nSE.mean       2.067018e-02  4.874068e-02  2.614656e-02  3.031656e-02\nCI.mean.0.95  4.052675e-02  9.556282e-02  5.126395e-02  5.943979e-02\nvar           1.504798e+00  8.367052e+00  2.407790e+00  3.237048e+00\nstd.dev       1.226702e+00  2.892586e+00  1.551706e+00  1.799180e+00\ncoef.var      1.162467e+02  1.515583e+02  5.077551e+01 -2.080580e+02\nskewness     -5.829983e-02 -6.689750e-03  5.927112e-02  1.620418e-02\nskew.2SE     -7.065472e-01 -8.107441e-02  7.183185e-01  1.963817e-01\nkurtosis      7.714304e+00  9.141053e+00  4.865294e+00  6.257155e+00\nkurt.2SE      4.675883e+01  5.540681e+01  2.949008e+01  3.792659e+01\nnormtest.W    9.187712e-01  8.496717e-01  9.384591e-01  9.298653e-01\nnormtest.p    5.671566e-40  1.020339e-49  6.131053e-36  8.237017e-38\n                        BA           CAT         CISCO            DD\nnbr.val       3.522000e+03  3.522000e+03  3.522000e+03  3.522000e+03\nnbr.null      1.500000e+01  2.400000e+01  5.000000e+01  2.900000e+01\nnbr.na        0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00\nmin          -1.938931e+01 -1.568589e+01 -1.768649e+01 -1.202802e+01\nmax           1.437774e+01  1.373497e+01  2.182386e+01  1.085590e+01\nrange         3.376704e+01  2.942086e+01  3.951034e+01  2.288392e+01\nsum           1.232621e+02  1.306920e+02 -8.997766e+01 -1.894761e+00\nmedian        5.279680e-02  4.291300e-02  3.800312e-02  0.000000e+00\nmean          3.499777e-02  3.710732e-02 -2.554732e-02 -5.379787e-04\nSE.mean       3.392155e-02  3.611067e-02  4.623812e-02  3.171197e-02\nCI.mean.0.95  6.650788e-02  7.079996e-02  9.065621e-02  6.217570e-02\nvar           4.052665e+00  4.592620e+00  7.529907e+00  3.541897e+00\nstd.dev       2.013123e+00  2.143040e+00  2.744068e+00  1.881993e+00\ncoef.var      5.752148e+01  5.775248e+01 -1.074112e+02 -3.498266e+03\nskewness     -2.605203e-01 -8.369997e-02  1.547891e-01 -1.523353e-01\nskew.2SE     -3.157298e+00 -1.014377e+00  1.875920e+00 -1.846181e+00\nkurtosis      5.392404e+00  4.077013e+00  7.329406e+00  5.061290e+00\nkurt.2SE      3.268507e+01  2.471206e+01  4.442585e+01  3.067808e+01\nnormtest.W    9.550329e-01  9.583075e-01  9.104004e-01  9.381393e-01\nnormtest.p    1.196739e-31  1.172506e-30  1.882675e-41  5.179385e-36\n                       XOM            GE\nnbr.val       3.522000e+03  3.522000e+03\nnbr.null      2.900000e+01  6.300000e+01\nnbr.na        0.000000e+00  0.000000e+00\nmin          -1.502710e+01 -1.368410e+01\nmax           1.586307e+01  1.798444e+01\nrange         3.089017e+01  3.166854e+01\nsum           9.343915e+01 -5.975640e+01\nmedian        5.437650e-02  0.000000e+00\nmean          2.653014e-02 -1.696661e-02\nSE.mean       2.745205e-02  3.466683e-02\nCI.mean.0.95  5.382353e-02  6.796911e-02\nvar           2.654232e+00  4.232702e+00\nstd.dev       1.629181e+00  2.057353e+00\ncoef.var      6.140870e+01 -1.212589e+02\nskewness      4.651513e-02  1.102593e-02\nskew.2SE      5.637262e-01  1.336254e-01\nkurtosis      1.043194e+01  7.781017e+00\nkurt.2SE      6.323129e+01  4.716320e+01\nnormtest.W    9.160764e-01  9.046828e-01\nnormtest.p    1.839459e-40  2.126284e-42"
  },
  {
    "objectID": "index.html#ajaamm",
    "href": "index.html#ajaamm",
    "title": "Topik 4 Eksplorasi Data EWVISI",
    "section": "ajaamm",
    "text": "ajaamm\nshshshe Seine is a 777-kilometre-long (483 mi) river in northern France. Its drainage basin is in the Paris Basin (a geological relative lowland) covering most of northern France. It rises at Source-Seine, 30 kilometres (19 mi) northwest of Dijon in northeastern France in the Langres plateau, flowing through Paris … See more he Seine is a 777-kilometre-long (483 mi) river in northern France. Its drainage basin is in the Paris Basin (a geological relative lowland) covering most of northern France. It rises at Source-Seine, 30 kilometres (19 mi) northwest of Dijon in northeastern France in the Langres plateau, flowing through Paris … See more\nhe Seine is a 777-kilometre-long (483 mi) river in northern France. Its drainage basin is in the Paris Basin (a geological relative lowland) covering most of northern France. It rises at Source-Seine, 30 kilometres (19 mi) northwest of Dijon in northeastern France in the Langres plateau, flowing through Paris … See more\nhe Seine is a 777-kilometre-long (483 mi) river in northern France. Its drainage basin is in the Paris Basin (a geological relative lowland) covering most of northern France. It rises at Source-Seine, 30 kilometres (19 mi) northwest of Dijon in northeastern France in the Langres plateau, flowing through Paris … See more"
  },
  {
    "objectID": "index.html#ajaamm-1",
    "href": "index.html#ajaamm-1",
    "title": "Topik 4 Eksplorasi Data EWVISI",
    "section": "2.1 ajaamm",
    "text": "2.1 ajaamm\nzjz"
  },
  {
    "objectID": "topik6.html",
    "href": "topik6.html",
    "title": "Topik 6 Grafik pada R II",
    "section": "",
    "text": "Sekarang kita akan membahas beberapa metode manipulasi data untuk membersihkan dataset, menggabungkan berbagai dataset atau mengekstrak variabel dari bingkai data sebelum kita melompat ke beberapa dasar pemrograman.\n\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(ggthemes)\nlibrary(plotly)\nlibrary(scales)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# download data\nd1 = read.csv(\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\",\n    check.names = FALSE)\n# head(d1)\n\n\n# rename Provice/State and Country columns\ncolnames(d1)[1:2] = c(\"State\", \"Country\")\n\nd1.2 = pivot_longer(d1, cols = -c(State, Country, Lat, Long), names_to = \"Date\",\n    values_to = \"Cases\")\n# convert dates\n\nd1.2$Date = as.Date(d1.2$Date, format = \"%m/%e/%y\")\n\n\nd2 = aggregate(d1.2$Cases, by = list(Lat = d1.2$Lat, Long = d1.2$Long, Country = d1.2$Country,\n    Date = d1.2$Date), FUN = sum)\ncolnames(d2)[5] = \"Cases\"\n# reorder\nd2 = d2[, c(4, 1, 2, 3, 5)]\n\n\ntop1 = aggregate(d2$Cases, by = list(Date = d2$Date, Country = d2$Country), FUN = sum)\n# select the last date to get overall total\ntop10 = top1[top1$Date == \"2021-08-11\", ]\n# select top 10\ntop10 = top10[order(-top10$x), ][1:10, ]\n# let's include Aus\ntop10_country = c(top10$Country, \"Australia\")\n\n\ncolnames(top1)[3] = \"Cases\"\ndata_p = top1[top1$Country %in% c(as.character(top10_country)), ]\n\np1 = ggplot(data = data_p, aes(Date, log(Cases), color = Country, group = Country)) +\n    geom_line(stat = \"identity\", size = 1) + scale_x_date(labels = date_format(\"%m/%y\"),\n    breaks = \"2 months\") + theme_wsj()\np1\n\n\n\n\n\nmyCol2 = c(\"slateblue1\", \"purple3\", \"turquoise2\", \"skyblue\", \"steelblue\", \"blue2\",\n    \"navyblue\", \"orange\", \"tomato\", \"coral2\", \"palevioletred\", \"violetred\", \"red2\",\n    \"springgreen2\", \"yellowgreen\", \"palegreen4\", \"wheat2\", \"tan\", \"tan2\", \"tan3\",\n    \"brown\", \"grey70\", \"grey50\", \"grey30\")\n\np2 = ggplot(data_p, aes(Date, Cases, group = Country, color = Country)) + geom_line(size = 1.5) +\n    geom_point(size = 1.5) + scale_colour_manual(values = myCol2, \"Countries\") +\n    geom_text(data = data_p[data_p$Date == max(data_p$Date), ], aes(x = as.Date(max(data_p$Date) +\n        4), label = Country), hjust = -0.01, nudge_y = 0.01, show.legend = FALSE) +\n    expand_limits(x = as.Date(c(min(data_p$Date), max(data_p$Date) + 5))) + scale_x_date(breaks = seq(as.Date(min(data_p$Date)),\n    as.Date(max(data_p$Date) + 5), by = \"30 days\"), date_labels = \"%m/%y\") + scale_y_continuous(labels = comma) +\n    theme_classic() + theme(axis.title = element_text(size = 15, face = \"bold\"))\np2\n\n\n\n\n\nfig_p2 = ggplotly(p2)\nfig_p2"
  },
  {
    "objectID": "topik6.html#interaktif-plot-menggunakan-plotly",
    "href": "topik6.html#interaktif-plot-menggunakan-plotly",
    "title": "Topik 6 Grafik pada R II",
    "section": "",
    "text": "Sekarang kita akan membahas beberapa metode manipulasi data untuk membersihkan dataset, menggabungkan berbagai dataset atau mengekstrak variabel dari bingkai data sebelum kita melompat ke beberapa dasar pemrograman.\n\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(ggthemes)\nlibrary(plotly)\nlibrary(scales)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# download data\nd1 = read.csv(\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\",\n    check.names = FALSE)\n# head(d1)\n\n\n# rename Provice/State and Country columns\ncolnames(d1)[1:2] = c(\"State\", \"Country\")\n\nd1.2 = pivot_longer(d1, cols = -c(State, Country, Lat, Long), names_to = \"Date\",\n    values_to = \"Cases\")\n# convert dates\n\nd1.2$Date = as.Date(d1.2$Date, format = \"%m/%e/%y\")\n\n\nd2 = aggregate(d1.2$Cases, by = list(Lat = d1.2$Lat, Long = d1.2$Long, Country = d1.2$Country,\n    Date = d1.2$Date), FUN = sum)\ncolnames(d2)[5] = \"Cases\"\n# reorder\nd2 = d2[, c(4, 1, 2, 3, 5)]\n\n\ntop1 = aggregate(d2$Cases, by = list(Date = d2$Date, Country = d2$Country), FUN = sum)\n# select the last date to get overall total\ntop10 = top1[top1$Date == \"2021-08-11\", ]\n# select top 10\ntop10 = top10[order(-top10$x), ][1:10, ]\n# let's include Aus\ntop10_country = c(top10$Country, \"Australia\")\n\n\ncolnames(top1)[3] = \"Cases\"\ndata_p = top1[top1$Country %in% c(as.character(top10_country)), ]\n\np1 = ggplot(data = data_p, aes(Date, log(Cases), color = Country, group = Country)) +\n    geom_line(stat = \"identity\", size = 1) + scale_x_date(labels = date_format(\"%m/%y\"),\n    breaks = \"2 months\") + theme_wsj()\np1\n\n\n\n\n\nmyCol2 = c(\"slateblue1\", \"purple3\", \"turquoise2\", \"skyblue\", \"steelblue\", \"blue2\",\n    \"navyblue\", \"orange\", \"tomato\", \"coral2\", \"palevioletred\", \"violetred\", \"red2\",\n    \"springgreen2\", \"yellowgreen\", \"palegreen4\", \"wheat2\", \"tan\", \"tan2\", \"tan3\",\n    \"brown\", \"grey70\", \"grey50\", \"grey30\")\n\np2 = ggplot(data_p, aes(Date, Cases, group = Country, color = Country)) + geom_line(size = 1.5) +\n    geom_point(size = 1.5) + scale_colour_manual(values = myCol2, \"Countries\") +\n    geom_text(data = data_p[data_p$Date == max(data_p$Date), ], aes(x = as.Date(max(data_p$Date) +\n        4), label = Country), hjust = -0.01, nudge_y = 0.01, show.legend = FALSE) +\n    expand_limits(x = as.Date(c(min(data_p$Date), max(data_p$Date) + 5))) + scale_x_date(breaks = seq(as.Date(min(data_p$Date)),\n    as.Date(max(data_p$Date) + 5), by = \"30 days\"), date_labels = \"%m/%y\") + scale_y_continuous(labels = comma) +\n    theme_classic() + theme(axis.title = element_text(size = 15, face = \"bold\"))\np2\n\n\n\n\n\nfig_p2 = ggplotly(p2)\nfig_p2"
  },
  {
    "objectID": "topik6.html#animation-using-gganimate",
    "href": "topik6.html#animation-using-gganimate",
    "title": "Topik 6 Grafik pada R",
    "section": "6.2 Animation using gganimate",
    "text": "6.2 Animation using gganimate\nSekarang kita akan membahas beberapa metode manipulasi data untuk membersihkan dataset, menggabungkan\n\nlibrary(gganimate)\np1.anim = p1 + transition_reveal(Date)\nanim_p1 = animate(p1.anim, fps = 10, start_pause = 2, end_pause = 5, rewind = FALSE,\n    width = 800, height = 1000)\nanim_save(filename = \"covid_cases_log_2021aug.gif\", animation = anim_p1)\n\n\nlibrary(tidyverse)  #using tidyverse here to easily create grouped statistics\nd_au_3m = read.csv(\"data/Last 3 months.csv\")\n# the date column name doesnt look ok so lets rename it\ncolnames(d_au_3m)[1] = \"Date\"\n# convert to date type\nd_au_3m$Date = as.Date(d_au_3m$Date, format = \"%d/%m/%y\")\nd_au_3m = d_au_3m[, c(1:3, 9)]\ndata_p2 = d_au_3m %&gt;%\n    pivot_longer(cols = -Date, names_to = \"State\", values_to = \"Cases\")\nrolling1 = data_p2 %&gt;%\n    arrange(Date, State, Cases) %&gt;%\n    group_by(State) %&gt;%\n    mutate(EMA = TTR::EMA(Cases, n = 7))  #add EMA\nrolling1 = rolling1 %&gt;%\n    arrange(Date, State, Cases) %&gt;%\n    group_by(State) %&gt;%\n    mutate(SMA = TTR::SMA(Cases, n = 7))  #add SMA\nrolling1 = rolling1[rolling1$Date &gt; as.Date(\"2021-07-15\"), ]  #selecting from 15 July 2021\nrolling1$State = factor(rolling1$State, levels = c(\"NSW\", \"VIC\", \"ACT\"))\n\n\nlibrary(ggthemes)\nlibrary(ggtext)\np2 = ggplot(rolling1, aes(Date, Cases)) + geom_point(alpha = 0.7, aes(color = State,\n    group = seq_along(Date), frame = Cases)) + geom_path(aes(y = EMA, color = State),\n    arrow = arrow(ends = \"last\", type = \"closed\", length = unit(0.05, \"inches\")),\n    size = 1.05, show.legend = FALSE)\np3 = p2 + scale_x_date(breaks = c(seq(min(rolling1$Date), max(rolling1$Date), by = \"5 days\")),\n    date_labels = \"%d/%m\") + scale_color_discrete(name = \"\") + labs(x = \"Date\", y = \"Cases\") +\n    theme_minimal() + theme(title = element_text(face = \"bold\"), legend.position = \"none\",\n    axis.title = element_text(size = 8), strip.text.x = element_text(face = \"bold\"),\n    axis.text.x = element_text(size = 5, face = \"bold\"), axis.text.y = element_text(size = 6,\n        face = \"bold\"), legend.title = element_text(size = 10), plot.subtitle = element_markdown()) +\n    labs(x = \"Date\", y = \"Cases/EMA (7 Day)\")\n\np2.anim = p3 + transition_manual(Date, cumulative = TRUE) + ggtitle(\"NSW, VIC & ACT Daily Cases/EMA(7 Days) \",\n    subtitle = \"Date:{current_frame}&lt;br&gt;&lt;span style='color:#F8766D;'&gt;NSW:{rolling1[rolling1$Date==as.Date(current_frame),3][2,1]} &lt;/span&gt; | &lt;span style='color:#00BA38;'&gt;VIC:{rolling1[rolling1$Date==as.Date(current_frame),3][3,1]}&lt;/span&gt; | &lt;span style='color:#619CFF;'&gt; ACT:{rolling1[rolling1$Date==as.Date(current_frame),3][1,1]}&lt;/span&gt;\")\n\nanim_p2 = animate(p2.anim, fps = 8, start_pause = 1, end_pause = 30, detail = 2,\n    rewind = FALSE, width = 720, height = 720, res = 140, renderer = gifski_renderer())\nanim_save(filename = \"covid_aus_cases_EMA_aug30_.gif\", animation = anim_p2)"
  },
  {
    "objectID": "topik6.html#plot-maps",
    "href": "topik6.html#plot-maps",
    "title": "Topik 6 Grafik pada R II",
    "section": "6.2 Plot Maps",
    "text": "6.2 Plot Maps\nSekarang kita akan membahas beberapa metode manipulasi data untuk membersihkan dataset, menggabungkan\n\n# take last day's data data from d2\nd2 = d2[d2$Date == max(d2$Date), ]\nworld = map_data(\"world\")\nw1 = ggplot() + geom_polygon(data = world, aes(color = region, x = long, y = lat,\n    group = group), fill = \"white\") + theme_map() + theme(legend.position = \"none\") +\n    scale_fill_brewer(palette = \"Blues\")\nmap1 = w1 + geom_point(aes(x = Long, y = Lat, size = Cases, colour = Country), data = d2) +\n    labs(title = paste(\"COVID-19 Cases as of \", as.character(unique(d2$Date))))\n# static version\nmap1\n\n\n\n\n\n# interactive version\nmap2 = ggplotly(map1, originalData = FALSE, tooltip = c(\"colour\", \"size\"), width = 750)\nmap2\n\n\n\n\n\n\n# To save htmlwidgets::saveWidget(map2,file='map2.html')\n\nKita akan menggunakan contoh dataset yang disebut us_stocks.csv\nMari kita impor menggunakan\nread.csv"
  },
  {
    "objectID": "topik5.html",
    "href": "topik5.html",
    "title": "Topik 5 Grafik pada R I",
    "section": "",
    "text": "One of the most popular and most frequently used functions to build a new plot in R is the plot function. Plot is a high level generic graphic function which depen\n\n# Generate two random normal vectors\nx = rnorm(100)\ny = rnorm(100)\n# plot x and y using the plot() function\nplot(x, y)\n\n\n\n\n\nargs(plot.default)\n\nfunction (x, y = NULL, type = \"p\", xlim = NULL, ylim = NULL, \n    log = \"\", main = NULL, sub = NULL, xlab = NULL, ylab = NULL, \n    ann = par(\"ann\"), axes = TRUE, frame.plot = axes, panel.first = NULL, \n    panel.last = NULL, asp = NA, xgap.axis = NA, ygap.axis = NA, \n    ...) \nNULL\n\n\n\nplot(x, y, main = \"Figure-2\", xlab = \"Normal X\", ylab = \"Normal Y\")\n\n\n\n\n\n\n\nOne of the most popular and most frequently used functions to build a new plot in R is the\n\n# change the working directory to the folder containing data_fin.csv or provide\n# the full path with the filename\nload(\"data/data_fin.RData\")\n# column names\ncolnames(FinData)\n\n [1] \"Date\"  \"DJI\"   \"AXP\"   \"MMM\"   \"ATT\"   \"BA\"    \"CAT\"   \"CISCO\" \"DD\"   \n[10] \"XOM\"   \"GE\"    \"GS\"    \"HD\"    \"IBM\"   \"INTC\"  \"JNJ\"   \"JPM\"   \"MRK\"  \n[19] \"MCD\"   \"MSFT\"  \"NKE\"  \n\n\n\n# plot a line plot for Dow Jones stock index prices\nplot(FinData$MSFT, type = \"l\", main = \"Microsoft Prices\", ylab = \"Prices\")\n\n\n\n\n\nlibrary(zoo)\n# convert data to class zoo\nFinData.ts = zoo(FinData[, 2:5], order.by = FinData$Date)\n# plot multiple stacked plot\nplot(FinData.ts, col = gray.colors(4))  #figure-4\n\n\n\n\n\n\n\nOne of the most popular and most frequently used\n\nload(\"data/GDP_Yearly.RData\")\npar1 = par()\npar(ask = F)\nbarplot(height = GDP$Australia, names.arg = GDP$Year, ylab = \"GDP Per Capita\")  #figure-5\n\n\n\n\n\n# convert data to matrix\ndata = as.matrix(GDP[, 2:12])\n# create row names\nrownames(data) = GDP$Year\n# plot a stacked bar plot with legend showing the years\nbarplot(height = data[1:5, ], beside = FALSE, col = rainbow(5), legend = rownames(data[1:5,\n    ]), args.legend = list(x = \"top\", horiz = TRUE, inset = -0.1), cex.names = 0.6)\n\n\n\n\n\npar(par1)\n\n\n\n\nOne of the most popular and most frequently used\n\npie(x = data[1, ], labels = colnames(data))\n\n\n\n\n\n\n\nOne of the most popular and most frequently used\n\npairs(data[, 1:5])\n\n\n\n\n\npairs(~Australia + UK + USA, data = data)"
  },
  {
    "objectID": "topik5.html#dasar-plot-di-r",
    "href": "topik5.html#dasar-plot-di-r",
    "title": "Topik 5 Grafik pada R I",
    "section": "",
    "text": "One of the most popular and most frequently used functions to build a new plot in R is the plot function. Plot is a high level generic graphic function which depen\n\n# Generate two random normal vectors\nx = rnorm(100)\ny = rnorm(100)\n# plot x and y using the plot() function\nplot(x, y)\n\n\n\n\n\nargs(plot.default)\n\nfunction (x, y = NULL, type = \"p\", xlim = NULL, ylim = NULL, \n    log = \"\", main = NULL, sub = NULL, xlab = NULL, ylab = NULL, \n    ann = par(\"ann\"), axes = TRUE, frame.plot = axes, panel.first = NULL, \n    panel.last = NULL, asp = NA, xgap.axis = NA, ygap.axis = NA, \n    ...) \nNULL\n\n\n\nplot(x, y, main = \"Figure-2\", xlab = \"Normal X\", ylab = \"Normal Y\")\n\n\n\n\n\n\n\nOne of the most popular and most frequently used functions to build a new plot in R is the\n\n# change the working directory to the folder containing data_fin.csv or provide\n# the full path with the filename\nload(\"data/data_fin.RData\")\n# column names\ncolnames(FinData)\n\n [1] \"Date\"  \"DJI\"   \"AXP\"   \"MMM\"   \"ATT\"   \"BA\"    \"CAT\"   \"CISCO\" \"DD\"   \n[10] \"XOM\"   \"GE\"    \"GS\"    \"HD\"    \"IBM\"   \"INTC\"  \"JNJ\"   \"JPM\"   \"MRK\"  \n[19] \"MCD\"   \"MSFT\"  \"NKE\"  \n\n\n\n# plot a line plot for Dow Jones stock index prices\nplot(FinData$MSFT, type = \"l\", main = \"Microsoft Prices\", ylab = \"Prices\")\n\n\n\n\n\nlibrary(zoo)\n# convert data to class zoo\nFinData.ts = zoo(FinData[, 2:5], order.by = FinData$Date)\n# plot multiple stacked plot\nplot(FinData.ts, col = gray.colors(4))  #figure-4\n\n\n\n\n\n\n\nOne of the most popular and most frequently used\n\nload(\"data/GDP_Yearly.RData\")\npar1 = par()\npar(ask = F)\nbarplot(height = GDP$Australia, names.arg = GDP$Year, ylab = \"GDP Per Capita\")  #figure-5\n\n\n\n\n\n# convert data to matrix\ndata = as.matrix(GDP[, 2:12])\n# create row names\nrownames(data) = GDP$Year\n# plot a stacked bar plot with legend showing the years\nbarplot(height = data[1:5, ], beside = FALSE, col = rainbow(5), legend = rownames(data[1:5,\n    ]), args.legend = list(x = \"top\", horiz = TRUE, inset = -0.1), cex.names = 0.6)\n\n\n\n\n\npar(par1)\n\n\n\n\nOne of the most popular and most frequently used\n\npie(x = data[1, ], labels = colnames(data))\n\n\n\n\n\n\n\nOne of the most popular and most frequently used\n\npairs(data[, 1:5])\n\n\n\n\n\npairs(~Australia + UK + USA, data = data)"
  },
  {
    "objectID": "topik5.html#grafik-parameter-di-r",
    "href": "topik5.html#grafik-parameter-di-r",
    "title": "Topik 5 Grafik pada R I",
    "section": "5.2 Grafik Parameter di R",
    "text": "5.2 Grafik Parameter di R\nOne of the most popular and most frequently used functions to build a new plot in R is the plot function. Plot is a high level generic graphic function which depen\n\n# first save the default parameters\npar.old = par()\n# change the margins\npar(mar = c(5, 4, 7, 2))\n# plot the bargraph\nbarplot(height = data[1:5, ], beside = FALSE, col = rainbow(5), legend = rownames(data[1:5,\n    ]), args.legend = list(x = \"top\", horiz = TRUE, inset = -0.1), cex.names = 0.6)\ntitle(\"Bar Plot \\n(with custom margins)\")\n\n\n\n# set parameters to default\npar(par.old)\n\n\n# first save the default parameters\npar.old = par()\n# creat a 2X2 grid\npar(mfrow = c(2, 2))\n# scatterplot\nplot(x, y, xlab = \"Normal X\", ylab = \"Normal Y\")\n# time series plot\nplot(FinData.ts[, 1])\n# bar plot\nbarplot(height = GDP$Australia, names.arg = GDP$Year, ylab = \"GDP Per Capita (Australia)\")\n# pie chart\npie(x = data[1:11, 1], labels = rownames(data[1:11, ]))\n\n\n\n# set parameters to default\npar(par.old)"
  },
  {
    "objectID": "topik5.html#pengenalan-ggplot2",
    "href": "topik5.html#pengenalan-ggplot2",
    "title": "Topik 5 Grafik pada R I",
    "section": "5.3 Pengenalan ggplot2",
    "text": "5.3 Pengenalan ggplot2\n\n5.3.1 qplot\nOne of the most popular and most frequently used functions to build a new plot in R is the plot function. Plot is a high level generic graphic function which depen\n\nx = rnorm(100)\ny = rnorm(100)\n# load the library\nlibrary(ggplot2)\n# simple scatterplot using qplot\nqplot(x, y)\n\n\n\n\n\nload(\"data/data_fin.RData\")\n# line plot using qplot\nqplot(x = FinData$Date, y = FinData$DJI, geom = \"line\", xlab = \"Dates\", ylab = \"Prices\",\n    main = \"DJIA Price Timeseries\")\n\n\n\n\n\n\n5.3.2 Layered grafik dengan ggplot\nOne of the most popular and most frequently used functions to build a new plot in R is the\n\n# Read 'long' format data\nload(\"data/GDP_l.RData\")\n# data snapshot\nhead(GDP_l)\n\n  Year   Country      GDP\n1 1990 Australia 18247.39\n2 1991 Australia 18837.19\n3 1992 Australia 18599.00\n4 1993 Australia 17658.08\n5 1994 Australia 18080.70\n6 1995 Australia 20375.30\n\n\n\n# creating the aesthetics using ggplot\np1 = ggplot(GDP_l, aes(Country, GDP, fill = Year))\n\n\n# figure\np1 + geom_bar(stat = \"identity\")\n\n\n\n\n\n# change the aesthetics to show time on X-axis and GDP values on Y-axis the\n# colour line fill be according to the country\np2 = ggplot(GDP_l, aes(Year, GDP, colour = Country, group = Country))\np2 + geom_line()\n\n\n\n\n\n# change the aesthetics to show time on X-axis and GDP values on Y-axis the\n# colour line fill be according to the country\np2 = ggplot(GDP_l, aes(Year, GDP, colour = Country, group = Country))\np2 + geom_line() + facet_grid(Country ~ .)\n\n\n\n\n\n\n5.3.2 Menyusun plot menggunakan gridExtra\nOne of the most popular and most frequently used functions to build a new plot in R is the\n\np1.1 = ggplot(GDP_l, aes(x = Year, y = GDP))\np2.1 = p1.1 + geom_bar(aes(fill = Country), stat = \"identity\", position = \"dodge\")\n\n\np1.2 = ggplot(GDP_l[GDP_l$Country %in% c(\"Australia\", \"UK\", \"USA\"), ], aes(Year,\n    GDP))\np2.2 = p1.2 + geom_col(aes(fill = Country)) + labs(title = \"GDP for Aus, US and UK\")  #using labs to modify title\np2.2\n\n\n\n\n\np1.3 = ggplot(FinData, aes(x = Date, y = DJI))\np2.3 = p1.3 + geom_path(colour = \"darkblue\") + geom_smooth(colour = \"black\") + theme_linedraw()  #changing theme\np2.3\n\n\n\n\n\nlibrary(gridExtra)\nfig1 = grid.arrange(p2.1, p2.2, p2.3, nrow = 3, heights = c(20, 12, 12), top = \"Combined plots in three rows\")\n\n\n\n\n\nggsave(filename = \"combined_plot.pdf\", plot = fig1)"
  },
  {
    "objectID": "topik7.html",
    "href": "topik7.html",
    "title": "Topik 7 Regresi Linear",
    "section": "",
    "text": "Analisis regresi adalah salah satu alat yang paling banyak digunakan dalam penelitian kuantitatif yang digunakan untuk menganalisis hubungan antar variabel."
  },
  {
    "objectID": "topik7.html#data-preprosesi",
    "href": "topik7.html#data-preprosesi",
    "title": "Topik 7 Regresi Linear",
    "section": "7.1 Data Preprosesi",
    "text": "7.1 Data Preprosesi\n\nUnduh data stok menggunakan paket quantmod R\nMengonversi data menjadi pengembalian\nHasilkan beberapa statistik deskriptif\nBeberapa plot\nData\n\n\n# Run the following to download and save the data, this should be\n# done once and when updating the time period\nlibrary(quantmod)\nlibrary(pander)\nlibrary(xts)\nlibrary(TTR)\n# download stock\nBHP = getSymbols(\"BHP.AX\", from = \"2019-01-01\", to = \"2021-07-31\", auto.assign = FALSE)\n# download index\nASX = getSymbols(\"^AXJO\", from = \"2019-01-01\", to = \"2021-07-31\", auto.assign = FALSE)\n# save both in rds (to be used in the TA chapter)\nsaveRDS(BHP, file = \"data/bhp_prices.rds\")\nsaveRDS(ASX, file = \"data/asx200.rds\")\n\n\nUbah ke pengembalian\n\n\nlibrary(quantmod)\nlibrary(pander)\nlibrary(xts)\nlibrary(TTR)\n# load data from the saved files (not required if we execute the\n# chunk above)\nBHP = readRDS(\"data/bhp_prices.rds\")\nASX = readRDS(\"data/asx200.rds\")\n# using close prices\nbhp2 = BHP$BHP.AX.Close\nasx2 = ASX$AXJO.Close\n# covert to returns\n\nbhp_ret = dailyReturn(bhp2, type = \"log\")\nasx_ret = dailyReturn(asx2, type = \"log\")\n\n# merge the two with 'inner' join to get the same dates\ndata_lm1 = merge.xts(bhp_ret, asx_ret, join = \"inner\")\n# convert to data frame\ndata_lm2 = data.frame(index(data_lm1), data_lm1$daily.returns, data_lm1$daily.returns.1)\n# change column names\ncolnames(data_lm2) = c(\"Date\", \"bhp\", \"asx\")\nhead(data_lm2)  #there are row names which can be removed if required\n\n                 Date          bhp          asx\n2019-01-01 2019-01-01  0.000000000  0.000000000\n2019-01-02 2019-01-02  0.000000000  0.013510839\n2019-01-03 2019-01-03 -0.008947248 -0.002488271\n2019-01-06 2019-01-06  0.029808856  0.011289609\n2019-01-07 2019-01-07  0.001162480  0.006873792\n2019-01-08 2019-01-08 -0.003782954  0.009721207\n\n\n\nlibrary(pastecs)\ndesc_stat1 = stat.desc(data_lm2[, 2:3], norm = TRUE)\npander(desc_stat1, caption = \"Descriptive Statistics\", split.table = Inf)\n\n\nDescriptive Statistics\n\n\n\n\n\n\n\n \nbhp\nasx\n\n\n\n\nnbr.val\n653\n653\n\n\nnbr.null\n9\n1\n\n\nnbr.na\n0\n0\n\n\nmin\n-0.1557\n-0.102\n\n\nmax\n0.1128\n0.06766\n\n\nrange\n0.2685\n0.1697\n\n\nsum\n0.4948\n0.2853\n\n\nmedian\n0\n0.001163\n\n\nmean\n0.0007577\n0.0004369\n\n\nSE.mean\n0.0007444\n0.0005075\n\n\nCI.mean.0.95\n0.001462\n0.0009966\n\n\nvar\n0.0003618\n0.0001682\n\n\nstd.dev\n0.01902\n0.01297\n\n\ncoef.var\n25.1\n29.69\n\n\nskewness\n-0.4883\n-1.443\n\n\nskew.2SE\n-2.553\n-7.546\n\n\nkurtosis\n9.991\n13.32\n\n\nkurt.2SE\n26.16\n34.86\n\n\nnormtest.W\n0.9198\n0.8266\n\n\nnormtest.p\n3.885e-18\n5.497e-26"
  },
  {
    "objectID": "topik7.html#visualisasi",
    "href": "topik7.html#visualisasi",
    "title": "Topik 7 Regresi Linear",
    "section": "7.2 Visualisasi",
    "text": "7.2 Visualisasi\n\nlibrary(ggplot2)\nlibrary(tidyr)\n\np1 = ggplot(data_lm2, aes(asx, bhp))\np1 + geom_point(colour = \"brown\") + geom_smooth(method = \"lm\") + theme_minimal() +\n    labs(title = \"Scatter plot of BHPvsASX and Linear Fit\")\n\n\n\n\n\np2 = ggplot(data_lm2, aes(Date))\np2 + geom_line(aes(y = bhp, color = \"bhp\"), size = 1, lty = 1) + geom_line(aes(y = asx,\n    color = \"asx\"), size = 1, lty = 2) + scale_color_discrete(\"Asset\") +\n    theme_minimal() + labs(\"Line Chart of Returns\")"
  },
  {
    "objectID": "topik7.html#analisis-regresi-menggunakan-lm",
    "href": "topik7.html#analisis-regresi-menggunakan-lm",
    "title": "Topik 7 Regresi Linear",
    "section": "7.3 Analisis Regresi menggunakan lm",
    "text": "7.3 Analisis Regresi menggunakan lm\n\nGunakan model SIM method\n\n\nlreg1 = lm(formula = bhp ~ asx, data = data_lm2)\nsummary(lreg1)  #to generate main results\n\n\nCall:\nlm(formula = bhp ~ asx, data = data_lm2)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.077007 -0.008153 -0.000162  0.007500  0.060409 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 0.0003046  0.0005270   0.578    0.564    \nasx         1.0372280  0.0406422  25.521   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01346 on 651 degrees of freedom\nMultiple R-squared:  0.5001,    Adjusted R-squared:  0.4994 \nF-statistic: 651.3 on 1 and 651 DF,  p-value: &lt; 2.2e-16\n\n\n\npander(lreg1, add.significance.stars = T)  #to tabulate\n\n\nFitting linear model: bhp ~ asx\n\n\n\n\n\n\n\n\n\n\n \nEstimate\nStd. Error\nt value\nPr(&gt;|t|)\n\n\n\n\n\n(Intercept)\n0.0003046\n0.000527\n0.5779\n0.5635\n\n\n\nasx\n1.037\n0.04064\n25.52\n4.215e-100\n* * *\n\n\n\n\n\n\nGunakan Stargazer untuk menampilkan resuly\n\n\nlibrary(stargazer)\nstargazer(lreg1, type = \"text\", title = \"Regression Results\")\n\n\nRegression Results\n===============================================\n                        Dependent variable:    \n                    ---------------------------\n                                bhp            \n-----------------------------------------------\nasx                          1.037***          \n                              (0.041)          \n                                               \nConstant                      0.0003           \n                              (0.001)          \n                                               \n-----------------------------------------------\nObservations                    653            \nR2                             0.500           \nAdjusted R2                    0.499           \nResidual Std. Error      0.013 (df = 651)      \nF Statistic          651.320*** (df = 1; 651)  \n===============================================\nNote:               *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01\n\n\n\nDiagnostik Plot\n\n\npar(mfrow = c(2, 2))\nplot(lreg1)"
  }
]